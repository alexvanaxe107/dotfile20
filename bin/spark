#!/usr/bin/env bash
#
# spark # https://github.com/holman/spark
#
# Generates sparklines for a set of data.
#
# Here's a good web-based sparkline generator that was a bit of inspiration
# for spark:
#
#   https://datacollective.org/sparkblocks
#
# spark takes a comma-separated or space-separated list of data and then prints
# a sparkline out of it.
#
# Examples:
#
#   spark 1 5 22 13 53
#   # => ▁▁▃▂▇
#
#   spark 0 30 55 80 33 150
#   # => ▁▂▃▅▂▇
#
#   spark -h
#   # => Prints the spark help text.

# Generates sparklines.
#
# $1 - The data we'd like to graph.

regex_color=48de37
count=0
count_begin=1
count_end=
color=
percent="0.07"

fromhex(){
    hex=${1#"#"}
    r=$(printf '0x%0.2s' "$hex")
    g=$(printf '0x%0.2s' ${hex#??})
    b=$(printf '0x%0.2s' ${hex#????})
    printf '%3d' "$(( (r<75?0:(r-35)/40)*6*6 +
                       (g<75?0:(g-35)/40)*6   +
                       (b<75?0:(b-35)/40)     + 16 ))"
}

user_color=$(fromhex "$regex_color")

#count=88
#count_begin=88
#count_end=100

_echo()
{
  if [ "X$1" = "X-n" ]; then
    shift
    printf "\e[38;5;${color}m%s" "$*"
  else
    printf "\e[38;5;${color}m%s\n" "$*"
  fi
}

spark()
{
  local n numbers=

  # find min/max values
  local min=0xffffffff max=0

  for n in ${@//,/ }
  do
    # on Linux (or with bash4) we could use `printf %.0f $n` here to
    # round the number but that doesn't work on OS X (bash3) nor does
    # `awk '{printf "%.0f",$1}' <<< $n` work, so just cut it off
    n=${n%.*}
    (( n < min )) && min=$n
    (( n > max )) && max=$n
    numbers=$numbers${numbers:+ }$n
  done

  # print ticks
  local ticks=(▁ ▂ ▃ ▄ ▅ ▆ ▇ █)

  # use a high tick if data is constant
  (( min == max )) && ticks=(▅ ▆)

  local f=$(( (($max-$min)<<8)/(${#ticks[@]}-1) ))
  (( f < 1 )) && f=1

  total_numbers="${#@}"
  initial_color=$(echo "$total_numbers*${percent} / 1" | bc)
  final_color=$(echo "$total_numbers-$initial_color" | bc)

  color="$(($user_color-$initial_color))"

  for n in $numbers
  do
    count="$((count+1))"
    if [[ $count -le $initial_color ]]; then
        color="$((color+1))"
    elif [[ $final_color -lt $count ]]; then
        color="$((color+1))"
    else
        color="${user_color}"
    fi
    _echo -n ${ticks[$(( ((($n-$min)<<8)/$f) ))]}
  done
  _echo
}

# If we're being sourced, don't worry about such things
if [ "$BASH_SOURCE" == "$0" ]; then
  # Prints the help text for spark.
  help()
  {
    local spark=$(basename $0)
    cat <<EOF

    USAGE:
      $spark [-h|--help] VALUE,...

    EXAMPLES:
      $spark 1 5 22 13 53
      ▁▁▃▂█
      $spark 0,30,55,80,33,150
      ▁▂▃▄▂█
      echo 9 13 5 17 1 | $spark
      ▄▆▂█▁
EOF
  }

  # show help for no arguments if stdin is a terminal
  if { [ -z "$1" ] && [ -t 0 ] ; } || [ "$1" == '-h' ] || [ "$1" == '--help' ]
  then
    help
    exit 0
  fi

  spark ${@:-`cat`}
fi
