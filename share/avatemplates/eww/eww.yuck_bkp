
(defpoll time :interval "5s"
  `date +'{"hour":"%H","min":"%M"}'`)

(defpoll top_cpu :interval "5s"
    `ps axo comm,%cpu --no-headers --sort -%cpu | head -n 10`)

(defvar testv true)

(defpoll teste :interval "100s" 
               :run-while false 
           `cat ~/teste.txt`)

(defwindow powermenu
    :stacking "bg"
    :windowtype "desktop"
    :wm-ignore false
    :geometry (geometry
                :width "100%"
                :height "100%")
    (powermenu_layout))

(defwindow example
           :geometry (geometry :x "0%"
                               :y "0%"
                               :width "50%"
                               :height "20px"
                               :anchor "top center")
           :stacking "fg"
           :windowtype "dock"
           :reserve (struts :distance "40px" :side "top")
           :wm-ignore false
  (powermenu_layout))


(defwindow pc_infos
    :stacking "bg"
    :windowtype "normal"
    :wm-ignore false
    :geometry (geometry :x "5%"
                       :y "20%"
                       :width "100px"
                       :height "200px"
                       :anchor "top left")
    (pc_info_layout))

(defwidget pc_info_layout []
    (box :orientation "v" :valign "start"
        (header)
        (cpu_info_layout)
        (mem_info_layout)
        (_temp_info)
        ))

(defwidget _cpu_top_10 []
    (box
        top_cpu)
)

(defwidget header []
    "MONITOR"
)

(defwidget _temp_info []
    (box :class "temp_info" :orientation "v" :valign "start"
        "CPU TEMP: ${EWW_TEMPS.CORETEMP_PACKAGE_ID_0}°C"
        "GPU TEMP: ${EWW_TEMPS.AMDGPU_EDGE}°C"
        ))

(defwidget _mem_info []
    (box
        (box :halign "start"
            "RAM: ${round(EWW_RAM.used_mem / 1000000000, 2)} GB/${round(EWW_RAM.total_mem / 1000000000,2) } GB")
))

(defwidget _mem_graph []
            (box :class "mem_graph"
                (progress :value {EWW_RAM.used_mem/EWW_RAM.total_mem * 100}))
)

(defwidget mem_info_layout []
    (box :class "mem_info_class" :valign "start" :vexpand true
        (box
            (_mem_info)
            (_mem_graph)
            )))

(defwidget _cpu_info []
    (box
        (box :halign "start"
            "CPU: ${round (EWW_CPU.avg, 2)}%"
)
))

(defwidget _cpu_graph[]
    (graph :value "${EWW_CPU.avg}"
           :thickness 1
           :time-range "120s"
           :max 100
           :line-style "round"
           )
)

(defwidget cpu_info_layout []
    (box :class "cpu_info_class" :valign "start"
            (_cpu_info)
            (_cpu_graph)
        
))

(defwidget _buttons [shutdown shutdown_icon reboot
                    reboot_icon logout logout_icon]
  (box :class "btns-box" 
    (button :onclick shutdown shutdown_icon)
    (button :onclick reboot reboot_icon)
    (button :onclick logout logout_icon)))

(defwidget powermenu_layout []
    (box :class "layout-box"
        (box :valign "start" :space-evenly false :spacing 25
            (_buttons :shutdown "eww open --toggle cpu_info" :reboot "eww close cpu_info"
                :logout "eww close cpu_indo"
                :shutdown_icon "A" :reboot_icon "B" :logout_icon "C"))))
