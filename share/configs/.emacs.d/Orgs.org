#+title AVA Org Mode Configs
#+PROPERTY: header-args:emacs-lisp :tangle /home/alexvanaxe/.emacs.d/orgs.el :results none

* Org Roam stuffs
The idea is to transfer all org stuffs to here.

#+begin_src emacs-lisp

  ;; INSERT THE CODE BELOW WHEN SOME SPECIAL CAPTURE IS NEEDED
    ;(org-roam-capture-templates
    ; '(("d" "default" plain "%?" :target
    ;    (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
    ;    :unnarrowed t)))
    ; ("p" "projeto" plain
    ;  "Testing new template ${title}  %^{valor1}   %?" :target
    ;  (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
    ;  :unnarrowed t))

  (use-package org-roam
    :demand
    :init
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/Documents/Dropbox/orgs/roam/")
    (org-roam-completion-everywhere t)
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup))

#+end_src

* Roam Plus Agenda
This config is used to make the tagged itens an agenda item.

Taken from: [[https://d12frosted.io/posts/2021-01-16-task-management-with-roam-vol5.html][Vulpea Page]]

#+begin_src emacs-lisp

  (defun list-agenda-files ()
    "Return a list of note files containing 'agenda' tag." ;
    (seq-uniq
     (seq-map
      #'car
      (org-roam-db-query
       [:select [nodes:file]
                :from tags
                :left-join nodes
                :on (= tags:node-id nodes:id)
                :where (like tag (quote "%\"agenda\"%"))]))))

#+end_src

* ORG Configs

Improving the org mode.

#+begin_src emacs-lisp

    (defun ava/org-mode-setup()
      (org-indent-mode)
      ;; (variable-pitch-mode 1)
      (visual-line-mode 1))

    (use-package org
      :pin org
      :commands (org-capture org-agenda)
      :hook (org-mode . ava/org-mode-setup)
      :config
      (setq org-ellipsis " ▾")

      (setq org-agenda-start-with-log-mode t)
      (setq org-log-done 'time)
      (setq org-log-into-drawer t)

      (setq org-refile-targets
            '(("~/Documents/Dropbox/orgs/archive.org" :maxlevel . 1)
              ("~/Documents/Dropbox/orgs/ZTD_Finished.org" :maxlevel . 1)))

      ;; Save Org buffers after refiling!
      (advice-add 'org-refile :after 'org-save-all-org-buffers)

      (setq org-todo-keywords
            '((sequence "TODO(t)" "|" "DONE(d!)")
              (sequence "WAITING(w)" "READING(r)" "|" "READ(c!)")
              (sequence "LONGEST(o)" "LONG(l)" "SHORT(s)" "|" "FINISHED(f!)")))
    ;;          (sequence "BACKLOG(b)" "PLAN(p)" "|" "COMPLETED(c)")))

      (setq org-tag-alist
            '((:startgroup)
              ;; Put mutually exclusive tags here
              (:endgroup)
              ("@work" . ?W)
              ("book" . ?b)
              ("planning" . ?p)
              ("idea" . ?i)))

      (setq org-capture-templates
            `(("t" "Tasks / Projects")
              ("tt" "Task" entry (file+olp "~/Documents/Dropbox/orgs/ideas.org" "Inbox")
               "* TODO %?\n" :empty-lines 1)))

  ;;            ("j" "Journal Entries")
  ;;            ("jj" "Journal" entry
  ;;             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
  ;;             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
  ;;             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
  ;;             :clock-in :clock-resume
  ;;             :empty-lines 1)
  ;;            ("jm" "Meeting" entry
  ;;             (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
  ;;             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
  ;;             :clock-in :clock-resume
  ;;             :empty-lines 1)
  ;;
  ;;            ("w" "Workflows")
  ;;            ("we" "Checking Email" entry (file+olp+datetree "~/Projects/Code/emacs-from-scratch/OrgFiles/Journal.org")
  ;;             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)
  ;;
  ;;            ("m" "Metrics Capture")
  ;;            ("mw" "Weight" table-line (file+headline "~/Projects/Code/emacs-from-scratch/OrgFiles/Metrics.org" "Weight")
  ;;             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "tt")))

      ;; Org custom commands
      ;; Configure custom agenda views
      (setq org-agenda-custom-commands
            '(("d" "Dashboard"
               ((agenda "" ((org-deadline-warning-days 7)))
                (todo "SHORT"
                      ((org-agenda-overriding-header "Short Tasks")))
                (todo "LONG"
                      ((org-agenda-overriding-header "Long Tasks")))
                (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

              ("s" "Short Tasks"
               ((todo "SHORT"
                      ((org-agenda-overriding-header "Short Tasks")))))

              ("l" "Long Tasks"
               ((todo "LONG"
                      ((org-agenda-overriding-header "Long Tasks")))))

              ("B" "Books to read" tags-todo "+book"))) ;; We can use + or - to include remove a tag

      ;; ("W" "Work Tasks" tags-todo "+work-email") Filtra as tasks pelo tag



      (use-package org-bullets
        :hook (org-mode . org-bullets-mode)
        :custom
        (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))))
#+end_src


This is to remember case we want to use later
    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

* Org Update Agenda FilesConfigs

#+begin_src emacs-lisp
(defun agenda-files-update (&rest _)
  "Update the value of `org-agenda-files'."
  (setq org-agenda-files (list-agenda-files)))

(advice-add 'org-agenda :before #'agenda-files-update)

#+end_src

* Habits
#+begin_src emacs-lisp

  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit)
  (setq org-habit-graph-column 60)

#+end_src

* Presentations

Turn your emac in your powerponint!

#+begin_src emacs-lisp
  (use-package org-present
    :disabled
    :after org
    :init
    (defun ava/present-mode-enter()
      (org-present-big)
      (org-display-inline-images)
      (org-present-hide-cursor)
      (org-present-read-only))

    (defun ava/present-mode-quit()
      (org-present-small)
      (org-remove-inline-images)
      (org-present-show-cursor)
      (org-present-read-write))
    (add-hook 'org-present-mode-hook #'ava/present-mode-enter)
    (add-hook 'org-present-mode-quit-hook #'ava/present-mode-quit))
#+end_src


#+begin_src emacs-lisp
  (defun ava/presentation-setup ()
    (text-scale-set 1)
    (setq text-scale-mode-amount 3)
    (org-display-inline-images)
    (text-scale-mode 1))

  (defun ava/presentation-end ()
    (text-scale-mode 0))

  (use-package org-tree-slide
    :hook ((org-tree-slide-play . ava/presentation-setup)
           (org-tree-slide-stop . ava/presentation-end))
    :custom
    (org-image-actual-width nil))
#+end_src

* Visual fill column

This configuration just sets the org mode to be centered.

#+begin_src emacs-lisp

  (use-package visual-fill-column
    :init
    (add-hook 'org-mode-hook #'ava/org-mode-visual-fill)
    (add-hook 'dired-mode-hook #'ava/dired-mode-visual-fill))


  ;; (use-package company-box
  ;;   :hook (company-mode . company-mode-box)
  ;;   )


  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  ;; (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
  ;; (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
#+end_src

* Random of Randoms

#+begin_src emacs-lisp
  (defun ava/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (defun ava/dired-mode-visual-fill ()
    (setq visual-fill-column-width 080)
    (visual-fill-column-mode 1))

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("html" . "src html"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("js" . "src js"))
    (add-to-list 'org-structure-template-alist '("vue" . "src vue")))

  (with-eval-after-load 'org-faces
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :weight 'regular :height (cdr face))))
  ;; (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face))))
  (setq org-confirm-babel-evaluate nil)

  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (js . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes))


#+end_src
